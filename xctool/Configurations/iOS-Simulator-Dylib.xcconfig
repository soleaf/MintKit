//
// Copyright 2013 Facebook
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

//
// Trick Xcode into building this as a dynamic lib for iOS.
//

// Mapping of Xcode version to the newest, bundled iOS SDK.
XT_NEWEST_IOS_SDK_0460 = 6.1
XT_NEWEST_IOS_SDK_EXPANDED_0460 = 61000
XT_NEWEST_IOS_SDK_0500 = 7.0
XT_NEWEST_IOS_SDK_EXPANDED_0500 = 70000

// These versions must match an installed iPhoneSimulator SDK or the build will fail in Xcode.
XT_IOS_SDK_VERSION = $(XT_NEWEST_IOS_SDK_$(XCODE_VERSION_MINOR))
XT_IOS_SDK_VERSION_EXPANDED = $(XT_NEWEST_IOS_SDK_EXPANDED_$(XCODE_VERSION_MINOR))

// Must be set to 'macosx' or you'll get an error:
//    target specifies product type 'com.apple.product-type.library.dynamic', but there's no
//    such product type for the 'iphonesimulator' platform
SDKROOT = macosx

// Xcode 5's bundled linker seems to be less forgiving with us trying to make it
// build an iOS dylib.  Let's use a wrapper around 'ld' to make it strip out the
// OSX specific flags.
LD = ../Configurations/ld_dont_link_as_osx.py

ARCHS = i386
VALID_ARCHS = i386

// -fobjc-abi-version=2
//    Forces the ObjC 2.0 ABI.  You wouldn't normally set this for an OS X dylib as it's already
//    implied for all but the oldest releases of OS X.  This is required when building for the
//    Simulator - otherwise it defaults to v1 and winds up with linker errors.
//
// -D__IPHONE_OS_VERSION_MIN_REQUIRED=60000
//    Makes the availability macros work.  These defines are normally generated from the
//    -mmacosx-version-min=10.7 or -miphoneos-version-min=6.0 compiler flags, and those flags are
//    automatically inserted by Xcode given the type of project.  Since this is an OS X dylib
//    project, Xcode has already inserted "-mmacosx-version-min=10.7" for us which makes all the
//    availability macros think we're building for OS X (and, therefore, cannot use iOS-specific
//    classes).  Setting __IPHONE_OS_VERSION_MIN_REQUIRED convinces the availability macros we're
//    building for iOS.
_OTHER_CFLAGS = -fobjc-abi-version=2 -D__IPHONE_OS_VERSION_MIN_REQUIRED=$(XT_IOS_SDK_VERSION_EXPANDED)

// define these so includers that need additional cflags can do
// OTHER_CFLAGS = $(_IOS_SIMULATOR_CFLAGS) -addtional_flags
_IOS_SIMULATOR_CFLAGS = -isysroot $(PLATFORM_DIR)/../iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(XT_IOS_SDK_VERSION).sdk $(_OTHER_CFLAGS) -F$(PLATFORM_DIR)/../iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(XT_IOS_SDK_VERSION).sdk/Developer/Library/Frameworks

_IOS_SIMULATOR_LDFLAGS = -isysroot $(PLATFORM_DIR)/../iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(XT_IOS_SDK_VERSION).sdk -F$(PLATFORM_DIR)/../iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator$(XT_IOS_SDK_VERSION).sdk/Developer/Library/Frameworks -miphoneos-version-min=$(XT_IOS_SDK_VERSION)

OTHER_CFLAGS = $(_IOS_SIMULATOR_CFLAGS)
OTHER_LDFLAGS = $(_IOS_SIMULATOR_LDFLAGS)

